<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <style>
    /* Set height of the grid so .sidenav can be 100% (adjust if needed) */
    .row.content {height: 1500px}
    
    /* Set gray background color and 100% height */
    .sidenav {
      background-color: #f1f1f1;
      height: 100%;
    }

    li {
      cursor: pointer;
    }
    
    /* On small screens, set height to 'auto' for sidenav and grid */
    @media screen and (max-width: 767px) {
      .sidenav {
        height: auto;
        padding: 15px;
      }
      .row.content {height: auto;} 
    }

    #viz {
        width: 900px;
        height: 700px;
    }
   
  </style>
  <script src="https://rawgit.com/neo4j-contrib/neovis.js/master/dist/neovis.js"></script>
</head>
<body onload="draw()">

<div class="container-fluid">
  <div class="row content">
    <div class="col-sm-3 sidenav">
      <h4>Movies</h4>
      <ul class="nav nav-pills nav-stacked">
        <li class="active"><a href="/">Home</a></li>
        <li onclick="draw()"><a>Thickness (관계의 두께)</a></li>
        <li onclick="draw1()"><a>Node Size (노드 크기)</a></li>
        <li onclick="draw2()"><a>Community (색 구분)</a></li>
      </ul>
    </div>

    <div class="col-sm-9" id="viz">
    </div>
  </div>
</div>

<script>
function draw() {
    var config = {
      container_id: "viz",
      server_url: "bolt://192.168.1.211:17687",
      server_user: "neo4j",
      server_password: "admin",
      labels: {
        "User": {
            caption: "id"   
        },
        "Movie": {
            caption: "title"
        }
      },
      relationships: {
        "WATCHED":{
            caption: false,
            thickness: "count"
        }
      },
      initial_cypher: "MATCH p=()-[:WATCHED]->(), (n:Movie) return p,n"
    }

    var viz = new NeoVis.default(config);
    viz.render();
  }

function draw1() {
    var config = {
      container_id: "viz",
      server_url: "bolt://54.85.95.124:33762",
      server_user: "neo4j",
      server_password: "sling-cleansers-tugs",
      labels: {
        "Genre": {
          caption: "name"   
        },
        "Movie": {
          caption: "title",
          size: "imdbVotes"
        }
      },
      relationships: {
        "IN_GENRE":{
          caption: false
        }
      },
      initial_cypher: "MATCH p=(n:Movie)-[:IN_GENRE]->() RETURN p LIMIT 50"
    }

    var viz = new NeoVis.default(config);
    viz.render();
  }

  function draw2() {
    var config = {
      container_id: "viz",
      server_url: "bolt://54.85.95.124:33762",
      server_user: "neo4j",
      server_password: "sling-cleansers-tugs",
      labels: {
        "Movie": {
          caption: "title",
          size: "imdbVotes",
          community: "community"
        },
        "Genre": {
          caption: "name"  
        }
      },
      relationships: {
        "IN_GENRE":{
          caption: false
        }
      },
      initial_cypher: "MATCH p=(n:Movie)-[:IN_GENRE]->() RETURN p LIMIT 50"
    }
    
    var viz = new NeoVis.default(config);
    viz.render();
  }
</script>

</body>
</html>
